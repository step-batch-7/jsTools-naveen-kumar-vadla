one.txt contains all the english alphabets as each alphabet in each line 
a
2
f
c
1
d
4
e
5
b
3


considering a black box of the app :
[options,"one.txt"] ==> {sort.js} ==>
    which is the transformation of file name 
    to sorted content of the fileName according to options 

In our case, client has already chosen the name, parameters.
  (parameters are fileName)

--Individual tasks

<================================ Requirement=============================================>

<==> ( should give filtered by by specified field with defauld field seperator space)
two.txt contains
  j 0
  i 1
  h 2
  g 3
  f 4
  e 5
  d 6
  c 7
  b 8
  a 9

node ./sort.js -k 1 two.txt
  a 9
  b 8
  c 7
  d 6
  e 5
  f 4
  g 3
  h 2
  i 1
  j 0

[1.1] The Last Step
output: sortedData ( array )
["a 9","b 8","c 7","d 6","e 5","f 4","g 3","h 2","i 1","j 0"]

Input : unsorted fileContent and options ( object )
{options:['-k','2'],content:["j 0","i 1","h 2","g 3","f 4","e 5","d 6","c 7","b 8","a 9"]}

name : sortFileContent(contentAndOptions)

[1.2] The Previous Step

output: unsorted fileContent and options ( object )
{options:['-k','2'],content:["j 0","i 1","h 2","g 3","f 4","e 5","d 6","c 7","b 8","a 9"]}

input:fileName (string)
"two.txt"

name ==> generateContentOptionsObj( fileName,options )

[1.3] The First Starting Step ( main function )

output ==> console.log of given array joined with "\n" ( string )
  console.log( result.join("\n") )

input ==> process.argv.slice(2) ( array of userInput )
  ["-n","filename"]


<================================ Requirement=============================================>

<==>  ( should give numericallyly sorted content of given file for option -n )

node ./sort.js -n one.txt
  a
  b
  c
  d
  e
  f
  1
  2
  3
  4
  5

[1.1] The Last Step 

==> Option -n is specified <==
output ==> numerically sorted content of file ( array )
["a","b","c","d","e","f","1","2","3","4","5"]

input ==> unsorted file content ( fileContent ) ( array )
["a","2","f","c","1","d","4","e","5","b","3"] 

name ==> sortFileContent (fileContent)

[1.2] The Previous Step

output ==> fileContent ( array )
["a","2","f","c","1","d","4","e","5","b","3"] 

input ==> filename ( string )
  "one.txt"

name ==> getContentOfFile( fileName )

[1.3] The First Starting Step ( main function )

output ==> console.log of given array joined with "\n" ( string )
  console.log( result.join("\n") )

input ==> process.argv.slice(2) ( array of userInput )
  ["-n","filename"]

<===================================== Requirement=========================================>

<==>  ( should give sorted content of given file )

node ./sort.js one.txt
    1
    2
    3
    4
    5
    a
    b
    c
    d
    e
    f

[1.1] The Last Step

output ==> sorted content of file ( array )
  ["1","2","3","4","5","a","b","c","d","e","f"]

input ==> unsorted file content ( fileContent ) (array)
["a","2","f","c","1","d","4","e","5","b","3"] 

name ==> sortFileContent (fileContent)

[1.2] The Previous Step

output ==> fileContent ( array )
["a","2","f","c","1","d","4","e","5","b","3"] 

input ==> filename ( string )
  "one.txt"

name ==> getContentOfFile( fileName )

[1.3] The First Starting Step ( main function )

output ==> console.log of given array joined with "\n" ( string )
  console.log( result.join("\n") )

input ==> process.argv.slice(2) ( array of userInput )
  ["options","filename"]

name ==> main()


<=========================== Requirement =================================================>

<==> (should give reversly sorted content of given file for option -r)

node ./sort.js -r one.txt
  f
  e
  d
  c
  b
  a
  5
  4
  3
  2
  1


[1.1] The Last Step 

==> Option -r is specified <==
output ==> reversly sorted content of file ( array )
["f","e","d","c","b","a","5","4","3","2","1"]

input ==> unsorted file content ( fileContent ) ( array )
["a","2","f","c","1","d","4","e","5","b","3"] 

name ==> sortFileContent (fileContent)

[1.2] The Previous Step

output ==> fileContent ( array )
["a","2","f","c","1","d","4","e","5","b","3"] 

input ==> filename ( string )
  "one.txt"

name ==> getContentOfFile( fileName )

[1.3] The First Starting Step ( main function )

output ==> console.log of given array joined with "\n" ( string )
  console.log( result.join("\n") )

input ==> process.argv.slice(2) ( array of userInput )
  ["-r","filename"]

